# External Secrets Operator Configuration

# Install External Secrets Operator
apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets-system
  labels:
    name: external-secrets-system

---
# ServiceAccount for External Secrets with IRSA
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: external-secrets-system
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/external-secrets-role

---
# AWS Secrets Manager SecretStore
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: production
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa
            namespace: external-secrets-system

---
# Database Credentials External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: production
  labels:
    app.kubernetes.io/name: database-credentials
    app.kubernetes.io/component: external-secret
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: database-secret
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: database-secret
          rotated-by: external-secrets
      data:
        # Connection string template
        DATABASE_URL: "postgresql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .database }}"
  data:
    - secretKey: username
      remoteRef:
        key: production/database
        property: username
    - secretKey: password
      remoteRef:
        key: production/database
        property: password
    - secretKey: host
      remoteRef:
        key: production/database
        property: host
    - secretKey: port
      remoteRef:
        key: production/database
        property: port
    - secretKey: database
      remoteRef:
        key: production/database
        property: database

---
# API Keys External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: api-keys
  namespace: production
spec:
  refreshInterval: 5m
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: api-keys-secret
    creationPolicy: Owner
  data:
    - secretKey: slack-token
      remoteRef:
        key: production/api-keys
        property: slack_token
    - secretKey: github-token
      remoteRef:
        key: production/api-keys
        property: github_token
    - secretKey: datadog-api-key
      remoteRef:
        key: production/api-keys
        property: datadog_api_key

---
# Redis Credentials External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-credentials
  namespace: production
spec:
  refreshInterval: 2m
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: redis-secret
    creationPolicy: Owner
    template:
      data:
        REDIS_URL: "redis://:{{ .password }}@{{ .host }}:{{ .port }}/0"
  data:
    - secretKey: password
      remoteRef:
        key: production/redis
        property: password
    - secretKey: host
      remoteRef:
        key: production/redis
        property: host
    - secretKey: port
      remoteRef:
        key: production/redis
        property: port

---
# Monitoring for External Secrets
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: external-secrets-operator
  namespace: external-secrets-system
  labels:
    app.kubernetes.io/name: external-secrets-operator
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: external-secrets-operator
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# Grafana Dashboard ConfigMap for External Secrets
apiVersion: v1
kind: ConfigMap
metadata:
  name: external-secrets-dashboard
  namespace: monitoring
  labels:
    grafana_dashboard: "1"
data:
  external-secrets.json: |
    {
      "dashboard": {
        "id": null,
        "title": "External Secrets Operator",
        "tags": ["kubernetes", "security", "secrets"],
        "timezone": "browser",
        "panels": [
          {
            "title": "Secret Sync Status",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(external_secrets_sync_status{status=\"success\"}) by (name, namespace)",
                "legendFormat": "{{namespace}}/{{name}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "green", "value": 1}
                  ]
                }
              }
            }
          },
          {
            "title": "Sync Frequency",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(external_secrets_sync_calls_total[5m])",
                "legendFormat": "{{namespace}}/{{name}}"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

---
# PrometheusRule for External Secrets Alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: external-secrets-alerts
  namespace: external-secrets-system
  labels:
    app.kubernetes.io/name: external-secrets-alerts
spec:
  groups:
  - name: external-secrets
    rules:
    - alert: ExternalSecretSyncFailure
      expr: external_secrets_sync_status{status="error"} > 0
      for: 2m
      labels:
        severity: critical
        component: external-secrets
      annotations:
        summary: "External Secret sync failure"
        description: "ExternalSecret {{ $labels.namespace }}/{{ $labels.name }} has failed to sync for more than 2 minutes"
    
    - alert: ExternalSecretNotSynced
      expr: (time() - external_secrets_last_sync_time) > 600
      for: 5m
      labels:
        severity: warning
        component: external-secrets
      annotations:
        summary: "External Secret not synced recently"
        description: "ExternalSecret {{ $labels.namespace }}/{{ $labels.name }} has not been synced in the last 10 minutes"

---
# Secret Rotation Job Template
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation-validator
  namespace: external-secrets-system
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: external-secrets-sa
          restartPolicy: OnFailure
          containers:
          - name: validator
            image: amazon/aws-cli:2.13.0
            command:
            - /bin/sh
            - -c
            - |
              # Validate that all external secrets are syncing
              echo "Validating External Secrets sync status..."
              
              # Get all external secrets
              external_secrets=$(kubectl get externalsecrets -A -o jsonpath='{range .items[*]}{.metadata.namespace}{" "}{.metadata.name}{"\n"}{end}')
              
              failed_secrets=0
              
              while IFS= read -r line; do
                if [ -n "$line" ]; then
                  namespace=$(echo $line | cut -d' ' -f1)
                  name=$(echo $line | cut -d' ' -f2)
                  
                  # Check if secret is ready
                  ready=$(kubectl get externalsecret $name -n $namespace -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
                  
                  if [ "$ready" != "True" ]; then
                    echo "‚ùå ExternalSecret $namespace/$name is not ready"
                    failed_secrets=$((failed_secrets + 1))
                  else
                    echo "‚úÖ ExternalSecret $namespace/$name is ready"
                  fi
                fi
              done <<< "$external_secrets"
              
              if [ $failed_secrets -gt 0 ]; then
                echo "üö® $failed_secrets External Secrets are failing to sync"
                exit 1
              else
                echo "‚úÖ All External Secrets are syncing successfully"
              fi
            env:
            - name: AWS_REGION
              value: us-east-1
